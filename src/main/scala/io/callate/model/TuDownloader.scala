package io.callate.model

import java.util

import org.json4s.native.JsonMethods._
import org.jsoup.Connection.{Method, Response}
import org.jsoup.Jsoup

import scala.collection.mutable


class TuDownloader {
  private var csrf: String = ""
  private var cookies: util.Map[String, String] = new util.HashMap[String, String]()
  private val albums: mutable.Map[String, (String, Int)] = mutable.HashMap[String, (String, Int)]()

  def login(email: String, pass: String): Boolean = {
    var response: Response = Jsoup.connect("https://www.tuenti.com/?m=Login")
      .execute()

    cookies = response.cookies()
    val csfr: String = response.parse().select("input[name=csfr]").attr("value")

    response = Jsoup.connect("https://www.tuenti.com/?m=Login&func=do_login")
      .method(Method.POST)
      .cookies(cookies)
      .data("email", email)
      .data("input_password", pass)
      .data("csfr", csfr)
      .execute()

    if (!response.cookies().containsKey("sid")) {
      return false
    }

    // Get cookies response (header)
    cookies = response.cookies()

    // Add cookies generated by javascript response
    cookies.put("redirect_url", "m=Profile&func=index")
    cookies.put("tempHash", "m=Profile&func=index")

    response = Jsoup.connect("https://www.tuenti.com/")
      .ignoreContentType(true)
      .cookies(cookies)
      .execute()

    val profilePage = response.parse().html()
    val csfrIndex = profilePage.indexOf("csfr")
    csrf = profilePage.substring(csfrIndex + 9, csfrIndex + 17)
    val json_payload = parse(response.parse().select("#response_json_payload").text())

    cookies.remove("temp_hash")
    cookies.remove("redirect_url")
    cookies.remove("ourl")

    loadAlbums(response)

    true
  }

  private def loadAlbums(indexResponse: Response) = {
    val pAlbums = indexResponse.parse().select("#albumSelector").select(".sel-block")
    for(i <- 0 until pAlbums.size()) {
      val href = pAlbums.get(i).attr("href")
      val indexStart = href.lastIndexOf("y=") + 2
      val indexFinal = href.lastIndexOf("&")
      val albumId = href.substring(indexStart, indexFinal)
      val text = pAlbums.get(i).text()
      val number = Integer.valueOf(text.substring(text.lastIndexOf("(") + 1, text.lastIndexOf(")")).replace(".",""))
      val title = text.substring(0, text.lastIndexOf("(") - 1)
      albums.put(albumId, (title, number))
    }
  }

  def getAlbums = albums

  def getPhotosAlbumURLs(albumId: String): mutable.Set[String] = {
    var response = Jsoup.connect("https://www-1.tuenti.com/index.cupcake.php?m=Albums&func=getAlbumPhotos&collection_key=" + albumId + "&ajax=1")
      .ignoreContentType(true)
      .cookies(cookies)
      .execute()
    val htmlAlbum = Jsoup.parse(compact(render(parse(response.body().substring(8)) \\ "renderOutput" \\ "albumPhotosContainer" \\ "html")).replace("\\", ""))
    val photosElements = htmlAlbum.select("#albumBody").select("li")
    val photos = mutable.HashSet[String]()

    for (i <- 0 until photosElements.size()) {
      val id = photosElements.get(i).attr("id").substring(5)
      photos.add(id)
    }

    var i = 1
    var viewMore = ""
    while (viewMore != "null") {
      response = Jsoup.connect("https://www-1.tuenti.com/index.cupcake.php?m=Albums&func=getMorePhotosPage&collection_key=" + albumId + "&photos_page=" + i + "&ajax=1")
        .ignoreContentType(true)
        .cookies(cookies)
        .execute()

      val moreJson = parse(response.body().substring(8))
      viewMore = compact(render(moreJson \\ "renderOutput" \\ "albumsViewMore" \\ "html")).replace("\\", "")
      val htmlMore = compact(render(moreJson \\ "renderOutput" \\ "albumBody" \\ "html")).replace("\\", "")

      if (htmlMore != "null") {
        val morePhotos = Jsoup.parse(htmlMore).select("li")
        for (i <- 0 until morePhotos.size()) {
          val id = morePhotos.get(i).attr("id").substring(5)
          photos.add(id)
        }

        i += 1
      }
    }

    photos
  }

  def getPhotoUrl(photoId: String): String = {
    val response = Jsoup.connect("https://www-1.tuenti.com/index.cupcake.php?m=Photo&func=preloadPhotos&ajax=1")
      .ignoreContentType(true)
      .data("itemKey", photoId)
      .data("backgrounded", "false")
      .data("prefetchDirection", "10")
      .data("offset", "0")
      .data("pc", "{\"wt\":3}")
      .data("csfr", csrf)
      .data("csrf", csrf)
      .method(Method.POST)
      .cookies(cookies)
      .execute()

    val photoJson = parse(response.body().substring(8))
    val photoUrl = compact(render(photoJson \\ "jsonData" \\ photoId \\ "url"))
    val photoIndex = photoUrl.indexOf("\"", 8)
    photoUrl.substring(8, photoIndex)
  }

  def getPrivateMessagesURL: String = {
    val response = Jsoup.connect("https://www-1.tuenti.com/?m=Messages&func=index&ajax=1")
      .ignoreContentType(true)
      .cookies(cookies)
      .execute()

    val json = parse(response.body().substring(8))
    val html = Jsoup.parse(compact(render(json \\ "renderOutput" \\ "canvas" \\ "html")).replace("\\",""))
    val button = html.select("button").attr("onclick")
    val parent = button.indexOf("'")
    val comma = button.lastIndexOf(",")

    button.substring(parent + 1, comma - 1)
  }
}
